#include "../fibonacci_lib/algorithm.h"

#include <iostream>
#include <string>

// 195328212870775773163201494759625633244354299659187339695340519457162525788701569476664198763415014612887952433522023608462551091201956023374401543811519663615691996212564289430337011382780063800276741152792746666986557837931882283206127149758323033485489348957259923072291290192820926433162752173086146001791258204269965993602095933920200518486202840244734313981136741872020386848017531853862111287810824061774138329355456168760645406512595471802912654794289403698165920636101935929135213541037679908294032015570271611539503197597324778216295763162965335669477766328506234524559346064757502593581344345781676764625878859011372729907372947851144808957245619150350702558952911686855000880201323345874721779478144754679201609017064258562935974754653275757574007743203491342878518979535430473456030776507893876728653916679923281744936199152376814955763208537104785970618843873153058239562756087906310781900497516959470973671389174570455520213512335079440336071203050414468522104156503732106793227562586475119146114173603496812173802342247860802920210931924964904098323970668324705444176351252673245527541950168384520602300739495985427929829783120438211575764578769249558335140252215272066244180900325938075362849179668095297118507191379833678873770459913639333955814212036990261617972113250918400230553276071043164781909743004346477933632876014699961280239258294715573166889433394554292928718774877478920429616635653661079602391970210972847296670942733458634479804863394463521165497150726134276820547932093175079888010130416027982506354182344034558742236701282666356934611294613123128389060036547327660245693151518500183284831506454800299789359851612370740461582293544407017483395145758695474917502645421263642622247206004885546258996119047589210122428054289862159464666247856437357221777554987608768591203011855163566890201034463998397732663888903650784161807091545252992759735213957415477729146008794314339156060445825107823511662718926379233130146438805978794684448790605767862974609896274266635696824742933867402074365594260579447907119305225893159071938654552588042913974714018184916973383813844615484306312364929083558427807845613193645755911722136946338180311600307896211668652895953778436464402382516362449718197385444149563131714002850338928222741346030180942248372163218547172704528138240784256387473652491411180807838665063399453762392067005133918733310713606969818962828476324542329930627287045799129324574116753390227449996309656668092226251646858254455785134982414412726124015815753818098466667145006988839178551800894370189025721992485208742915560261917752281246606289967871665296784872684849050413284972977126880116399783764342802024522515501022403541698851853750158467388119404761972061960312653449675991789324447817070290444658957195022880915779389764242375181402099899958161231477902295781100168670186738619861797138139854666281969548553740707356228616165539428076418408092120479328166830059845047879294063563180974797551520350946827659187416109076375069027652943675615398032613889019448594100452922754188094573562079542189966296344134639695598099137501005376025944011361721917688114726450
// 4534355968226490642290139992796096559631067683585565483124248108070411241864496288278775013367814234676106615790155892833100345673846243104676900000936756893803676769777642059716492347060997973282994459039755683869105685411058885051979862321618071659608643166523833695792515458773247974295235724915183100135059940954313672345441853967639642257048786844333673556851153585056517249014177233301807239035068983866253233826620354847687722321662223383305226882245421258277211223435986491973881404168406609216954760818955479619408040043497601356464084611480778855378911228881396187039079060331474168814336581362769420066445056796904807027922065208551224508683937565519686130523209213804180827319885292805824696457556180161852004664494926234186485934292896521378574554544426221453176445385228867960454072522804961741905198550911362542849130027243353553345377968558497801959766365162905984572190434898213582212068569241211393131371321348657414408926700036655556324464997755685351468128988739170090705797083912419192306257054777274861099092451916822532682357814072123818963141147129610287340041050015549547086272721534936510345705849389706515725684266079756708385889612130516276472992631596744745949011999508491789521497159877319531917595916234240217185796967781020544965987668461439596506473322198532352137810818703064287550695189034358718163360412639767502090913354848015113595182411243263608049744737395896608759569909256138919905403404664655310556021101996525724843421071082933739200159651403373870955680756568226835379339839824880227237703197854614809323023472557966211738929885417307414847072116640441570575360458225614322429985978068323969654385552378378141386675079286837205802043347225419033684684301719893411568996526838242546875

int main(int argc, char * argv[])
{
  if (argc < 2)
  {
    std::cout << "No argument\n";
    return 1;
  }
  std::string arg = argv[1];
  if (arg == "exponential_naive")
  {
    auto result = fibonacci::algorithm::exponential_naive(50);
    std::cout << result << '\n';
    return 0;
  }
  if (arg == "linear_naive")
  {
    auto result = fibonacci::algorithm::linear_naive(92);
    std::cout << result << '\n';
    return 0;
  }
  if (arg == "linear")
  {
    auto result = fibonacci::algorithm::linear_big(92);
    std::cout << fibonacci::big_number::to_string(result) << '\n';
    return 0;
  }
  if (arg == "linear_2")
  {
    auto result = fibonacci::algorithm::linear_big(100'000);
    //std::cout << fibonacci::big_number::to_string(result) << '\n';
    std::cout << result.units_.size() << '\n';
    return 0;
  }
  if (arg == "log")
  {
    auto result = fibonacci::algorithm::fibonacci_pow<fibonacci::big_number::unsigned_binary, uint32_t>(92);
    std::cout << fibonacci::big_number::to_string(result) << '\n';
    return 0;
  }
  if (arg == "log_2")
  {
    auto result = fibonacci::algorithm::fibonacci_pow<fibonacci::big_number::unsigned_binary, uint32_t>(100'000);
    //std::cout << fibonacci::big_number::to_string(result) << '\n';
    std::cout << result.units_.size() << '\n';
    return 0;
  }
  if (arg == "log_3")
  {
    auto result = fibonacci::algorithm::fibonacci_pow<fibonacci::big_number::unsigned_binary, uint32_t>(1'000'001);
    //std::cout << fibonacci::big_number::to_string(result) << '\n';
    std::cout << result.units_.size() << '\n';
    return 0;
  }
  if (arg == "linear_first_big")
  {
    auto result = fibonacci::algorithm::linear_first_big();
    std::cout << result << '\n';
    return 0;
  }

  std::cout << "Unknown argument\n";
  return 1;
}